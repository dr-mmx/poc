// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poc/poc/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAppRegistryRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetAppRegistryRequest) Reset()         { *m = QueryGetAppRegistryRequest{} }
func (m *QueryGetAppRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAppRegistryRequest) ProtoMessage()    {}
func (*QueryGetAppRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{2}
}
func (m *QueryGetAppRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAppRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAppRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAppRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAppRegistryRequest.Merge(m, src)
}
func (m *QueryGetAppRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAppRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAppRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAppRegistryRequest proto.InternalMessageInfo

func (m *QueryGetAppRegistryRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetAppRegistryResponse struct {
	AppRegistry AppRegistry `protobuf:"bytes,1,opt,name=appRegistry,proto3" json:"appRegistry"`
}

func (m *QueryGetAppRegistryResponse) Reset()         { *m = QueryGetAppRegistryResponse{} }
func (m *QueryGetAppRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAppRegistryResponse) ProtoMessage()    {}
func (*QueryGetAppRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{3}
}
func (m *QueryGetAppRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAppRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAppRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAppRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAppRegistryResponse.Merge(m, src)
}
func (m *QueryGetAppRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAppRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAppRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAppRegistryResponse proto.InternalMessageInfo

func (m *QueryGetAppRegistryResponse) GetAppRegistry() AppRegistry {
	if m != nil {
		return m.AppRegistry
	}
	return AppRegistry{}
}

type QueryAllAppRegistryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAppRegistryRequest) Reset()         { *m = QueryAllAppRegistryRequest{} }
func (m *QueryAllAppRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAppRegistryRequest) ProtoMessage()    {}
func (*QueryAllAppRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{4}
}
func (m *QueryAllAppRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAppRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAppRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAppRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAppRegistryRequest.Merge(m, src)
}
func (m *QueryAllAppRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAppRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAppRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAppRegistryRequest proto.InternalMessageInfo

func (m *QueryAllAppRegistryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAppRegistryResponse struct {
	AppRegistry []AppRegistry       `protobuf:"bytes,1,rep,name=appRegistry,proto3" json:"appRegistry"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAppRegistryResponse) Reset()         { *m = QueryAllAppRegistryResponse{} }
func (m *QueryAllAppRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAppRegistryResponse) ProtoMessage()    {}
func (*QueryAllAppRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{5}
}
func (m *QueryAllAppRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAppRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAppRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAppRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAppRegistryResponse.Merge(m, src)
}
func (m *QueryAllAppRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAppRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAppRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAppRegistryResponse proto.InternalMessageInfo

func (m *QueryAllAppRegistryResponse) GetAppRegistry() []AppRegistry {
	if m != nil {
		return m.AppRegistry
	}
	return nil
}

func (m *QueryAllAppRegistryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDevRegistryRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetDevRegistryRequest) Reset()         { *m = QueryGetDevRegistryRequest{} }
func (m *QueryGetDevRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDevRegistryRequest) ProtoMessage()    {}
func (*QueryGetDevRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{6}
}
func (m *QueryGetDevRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDevRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDevRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDevRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDevRegistryRequest.Merge(m, src)
}
func (m *QueryGetDevRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDevRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDevRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDevRegistryRequest proto.InternalMessageInfo

func (m *QueryGetDevRegistryRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetDevRegistryResponse struct {
	DevRegistry DevRegistry `protobuf:"bytes,1,opt,name=devRegistry,proto3" json:"devRegistry"`
}

func (m *QueryGetDevRegistryResponse) Reset()         { *m = QueryGetDevRegistryResponse{} }
func (m *QueryGetDevRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDevRegistryResponse) ProtoMessage()    {}
func (*QueryGetDevRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{7}
}
func (m *QueryGetDevRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDevRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDevRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDevRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDevRegistryResponse.Merge(m, src)
}
func (m *QueryGetDevRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDevRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDevRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDevRegistryResponse proto.InternalMessageInfo

func (m *QueryGetDevRegistryResponse) GetDevRegistry() DevRegistry {
	if m != nil {
		return m.DevRegistry
	}
	return DevRegistry{}
}

type QueryAllDevRegistryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDevRegistryRequest) Reset()         { *m = QueryAllDevRegistryRequest{} }
func (m *QueryAllDevRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDevRegistryRequest) ProtoMessage()    {}
func (*QueryAllDevRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{8}
}
func (m *QueryAllDevRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDevRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDevRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDevRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDevRegistryRequest.Merge(m, src)
}
func (m *QueryAllDevRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDevRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDevRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDevRegistryRequest proto.InternalMessageInfo

func (m *QueryAllDevRegistryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDevRegistryResponse struct {
	DevRegistry []DevRegistry       `protobuf:"bytes,1,rep,name=devRegistry,proto3" json:"devRegistry"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDevRegistryResponse) Reset()         { *m = QueryAllDevRegistryResponse{} }
func (m *QueryAllDevRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDevRegistryResponse) ProtoMessage()    {}
func (*QueryAllDevRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{9}
}
func (m *QueryAllDevRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDevRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDevRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDevRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDevRegistryResponse.Merge(m, src)
}
func (m *QueryAllDevRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDevRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDevRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDevRegistryResponse proto.InternalMessageInfo

func (m *QueryAllDevRegistryResponse) GetDevRegistry() []DevRegistry {
	if m != nil {
		return m.DevRegistry
	}
	return nil
}

func (m *QueryAllDevRegistryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryShowAppUsersRequest struct {
	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (m *QueryShowAppUsersRequest) Reset()         { *m = QueryShowAppUsersRequest{} }
func (m *QueryShowAppUsersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowAppUsersRequest) ProtoMessage()    {}
func (*QueryShowAppUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{10}
}
func (m *QueryShowAppUsersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowAppUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowAppUsersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowAppUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowAppUsersRequest.Merge(m, src)
}
func (m *QueryShowAppUsersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowAppUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowAppUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowAppUsersRequest proto.InternalMessageInfo

func (m *QueryShowAppUsersRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryShowAppUsersResponse struct {
	Users string `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`
}

func (m *QueryShowAppUsersResponse) Reset()         { *m = QueryShowAppUsersResponse{} }
func (m *QueryShowAppUsersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowAppUsersResponse) ProtoMessage()    {}
func (*QueryShowAppUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{11}
}
func (m *QueryShowAppUsersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowAppUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowAppUsersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowAppUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowAppUsersResponse.Merge(m, src)
}
func (m *QueryShowAppUsersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowAppUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowAppUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowAppUsersResponse proto.InternalMessageInfo

func (m *QueryShowAppUsersResponse) GetUsers() string {
	if m != nil {
		return m.Users
	}
	return ""
}

type QueryShowAppParametersRequest struct {
	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (m *QueryShowAppParametersRequest) Reset()         { *m = QueryShowAppParametersRequest{} }
func (m *QueryShowAppParametersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowAppParametersRequest) ProtoMessage()    {}
func (*QueryShowAppParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{12}
}
func (m *QueryShowAppParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowAppParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowAppParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowAppParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowAppParametersRequest.Merge(m, src)
}
func (m *QueryShowAppParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowAppParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowAppParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowAppParametersRequest proto.InternalMessageInfo

func (m *QueryShowAppParametersRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryShowAppParametersResponse struct {
	Parameters string `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *QueryShowAppParametersResponse) Reset()         { *m = QueryShowAppParametersResponse{} }
func (m *QueryShowAppParametersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowAppParametersResponse) ProtoMessage()    {}
func (*QueryShowAppParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ca9fce318bfd72, []int{13}
}
func (m *QueryShowAppParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowAppParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowAppParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowAppParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowAppParametersResponse.Merge(m, src)
}
func (m *QueryShowAppParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowAppParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowAppParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowAppParametersResponse proto.InternalMessageInfo

func (m *QueryShowAppParametersResponse) GetParameters() string {
	if m != nil {
		return m.Parameters
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "poc.poc.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "poc.poc.QueryParamsResponse")
	proto.RegisterType((*QueryGetAppRegistryRequest)(nil), "poc.poc.QueryGetAppRegistryRequest")
	proto.RegisterType((*QueryGetAppRegistryResponse)(nil), "poc.poc.QueryGetAppRegistryResponse")
	proto.RegisterType((*QueryAllAppRegistryRequest)(nil), "poc.poc.QueryAllAppRegistryRequest")
	proto.RegisterType((*QueryAllAppRegistryResponse)(nil), "poc.poc.QueryAllAppRegistryResponse")
	proto.RegisterType((*QueryGetDevRegistryRequest)(nil), "poc.poc.QueryGetDevRegistryRequest")
	proto.RegisterType((*QueryGetDevRegistryResponse)(nil), "poc.poc.QueryGetDevRegistryResponse")
	proto.RegisterType((*QueryAllDevRegistryRequest)(nil), "poc.poc.QueryAllDevRegistryRequest")
	proto.RegisterType((*QueryAllDevRegistryResponse)(nil), "poc.poc.QueryAllDevRegistryResponse")
	proto.RegisterType((*QueryShowAppUsersRequest)(nil), "poc.poc.QueryShowAppUsersRequest")
	proto.RegisterType((*QueryShowAppUsersResponse)(nil), "poc.poc.QueryShowAppUsersResponse")
	proto.RegisterType((*QueryShowAppParametersRequest)(nil), "poc.poc.QueryShowAppParametersRequest")
	proto.RegisterType((*QueryShowAppParametersResponse)(nil), "poc.poc.QueryShowAppParametersResponse")
}

func init() { proto.RegisterFile("poc/poc/query.proto", fileDescriptor_e4ca9fce318bfd72) }

var fileDescriptor_e4ca9fce318bfd72 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xd1, 0x6e, 0x12, 0x41,
	0x14, 0x65, 0x5b, 0xc1, 0x38, 0x18, 0x49, 0xa7, 0x6b, 0x5a, 0xb7, 0x65, 0xb1, 0x6b, 0x05, 0x35,
	0xba, 0x2b, 0x18, 0xdf, 0x7c, 0x90, 0xa6, 0xb1, 0xf1, 0xad, 0x62, 0x7c, 0x51, 0x93, 0x66, 0x80,
	0xc9, 0x96, 0x84, 0xee, 0x4c, 0x99, 0x85, 0xb6, 0x36, 0xd5, 0xc4, 0x2f, 0x30, 0xfa, 0x0b, 0x7e,
	0x4c, 0x1f, 0x9b, 0xf8, 0xe2, 0x93, 0x31, 0xe0, 0x27, 0xf8, 0x01, 0x66, 0x67, 0x67, 0xd9, 0x59,
	0x76, 0x5a, 0x24, 0xd1, 0x87, 0x26, 0x9d, 0x3b, 0xf7, 0xdc, 0x73, 0xce, 0x5c, 0xee, 0x05, 0xb0,
	0x48, 0x49, 0xcb, 0x09, 0xfe, 0xf6, 0xfb, 0xb8, 0x77, 0x64, 0xd3, 0x1e, 0xf1, 0x09, 0xbc, 0x4c,
	0x49, 0xcb, 0xa6, 0xa4, 0x65, 0xe8, 0x2e, 0x71, 0x09, 0x8f, 0x39, 0xc1, 0x7f, 0xe1, 0xb5, 0xb1,
	0xea, 0x12, 0xe2, 0x76, 0xb1, 0x83, 0x68, 0xc7, 0x41, 0x9e, 0x47, 0x7c, 0xe4, 0x77, 0x88, 0xc7,
	0xc4, 0xed, 0xbd, 0x16, 0x61, 0x7b, 0x84, 0x39, 0x4d, 0xc4, 0x70, 0x58, 0xd5, 0x19, 0x54, 0x9b,
	0xd8, 0x47, 0x55, 0x87, 0x22, 0xb7, 0xe3, 0xf1, 0x64, 0x91, 0xab, 0x47, 0xec, 0x14, 0xf5, 0xd0,
	0x5e, 0x54, 0xc1, 0x88, 0xa2, 0x88, 0xd2, 0x9d, 0x1e, 0x76, 0x3b, 0xcc, 0x8f, 0xa4, 0xc5, 0x77,
	0x6d, 0x3c, 0x98, 0xb8, 0xb3, 0x74, 0x00, 0x5f, 0x04, 0x7c, 0xdb, 0xbc, 0x58, 0x03, 0xef, 0xf7,
	0x31, 0xf3, 0xad, 0x4d, 0xb0, 0x98, 0x88, 0x32, 0x4a, 0x3c, 0x86, 0xe1, 0x03, 0x90, 0x0b, 0x49,
	0x97, 0xb5, 0x9b, 0xda, 0x9d, 0x7c, 0xad, 0x60, 0x0b, 0xd3, 0x76, 0x98, 0xb8, 0x71, 0xe9, 0xf4,
	0x47, 0x29, 0xd3, 0x10, 0x49, 0x56, 0x0d, 0x18, 0xbc, 0xca, 0x16, 0xf6, 0xeb, 0x94, 0x36, 0x04,
	0xb1, 0xe0, 0x80, 0x3a, 0xc8, 0x76, 0xbc, 0x36, 0x3e, 0xe4, 0xb5, 0xae, 0x34, 0xc2, 0x83, 0xf5,
	0x06, 0xac, 0x28, 0x31, 0x42, 0xc1, 0x13, 0x90, 0x47, 0x71, 0x58, 0xc8, 0xd0, 0xc7, 0x32, 0x24,
	0x88, 0xd0, 0x22, 0xa7, 0x5b, 0x6d, 0x21, 0xa8, 0xde, 0xed, 0x2a, 0x04, 0x3d, 0x03, 0x20, 0x7e,
	0x6c, 0x51, 0xba, 0x6c, 0x87, 0x9d, 0xb1, 0x83, 0xce, 0xd8, 0x61, 0xbf, 0x45, 0x67, 0xec, 0x6d,
	0xe4, 0x62, 0x81, 0x6d, 0x48, 0x48, 0xeb, 0xab, 0x26, 0x3c, 0x4c, 0xd2, 0x9c, 0xe7, 0x61, 0x7e,
	0x06, 0x0f, 0x70, 0x2b, 0xa1, 0x72, 0x8e, 0xab, 0xac, 0x4c, 0x55, 0x19, 0x52, 0x27, 0x64, 0x4a,
	0xdd, 0xd9, 0xc4, 0x83, 0x99, 0xbb, 0x93, 0xc0, 0xc4, 0xce, 0xda, 0x71, 0x38, 0xd5, 0x1d, 0x09,
	0x12, 0x39, 0x93, 0xd2, 0xe5, 0xee, 0x28, 0x04, 0xfd, 0x8f, 0xee, 0xfc, 0x95, 0x87, 0xf9, 0x19,
	0x3c, 0xfc, 0xbb, 0xee, 0x3c, 0x04, 0xcb, 0x5c, 0xe5, 0xcb, 0x5d, 0x72, 0x50, 0xa7, 0xf4, 0x15,
	0xc3, 0x3d, 0x26, 0xf5, 0x06, 0x51, 0xfa, 0xbc, 0x1d, 0xf5, 0x86, 0x1f, 0xac, 0x2a, 0xb8, 0xa1,
	0x40, 0x08, 0x57, 0x3a, 0xc8, 0xf6, 0x83, 0x40, 0x04, 0xe1, 0x07, 0xeb, 0x31, 0x28, 0xca, 0x10,
	0x3e, 0xc4, 0xd8, 0x9f, 0xca, 0xf4, 0x14, 0x98, 0xe7, 0xc1, 0x04, 0x9d, 0x19, 0x3c, 0x43, 0x14,
	0x15, 0x60, 0x29, 0x52, 0xfb, 0x9d, 0x03, 0x59, 0x5e, 0x02, 0xbe, 0x05, 0xb9, 0x70, 0x77, 0xc0,
	0x95, 0xf1, 0x1b, 0xa7, 0x17, 0x92, 0xb1, 0xaa, 0xbe, 0x0c, 0xe9, 0xac, 0xa5, 0x8f, 0xdf, 0x7e,
	0x7d, 0x99, 0x5b, 0x80, 0x05, 0x27, 0xb9, 0x1b, 0xe1, 0x07, 0x90, 0x97, 0xc6, 0x09, 0xde, 0x4a,
	0x56, 0x51, 0xee, 0x25, 0x63, 0xfd, 0xe2, 0x24, 0x41, 0x79, 0x9b, 0x53, 0x96, 0x60, 0xd1, 0x51,
	0x2d, 0x5e, 0xe7, 0x98, 0xcf, 0xcb, 0x09, 0x7c, 0x07, 0xae, 0x49, 0xe8, 0x7a, 0xb7, 0x3b, 0xa9,
	0x41, 0xb9, 0x8a, 0x26, 0x35, 0xa8, 0x17, 0x89, 0x55, 0xe4, 0x1a, 0x96, 0xe0, 0x75, 0xa5, 0x86,
	0xc0, 0xbc, 0xf4, 0x69, 0x55, 0x98, 0x4f, 0x4f, 0x99, 0xc2, 0xbc, 0x62, 0x46, 0x14, 0xe6, 0xe5,
	0x6f, 0x16, 0xd9, 0xbc, 0x84, 0x56, 0x9b, 0x9f, 0xae, 0x41, 0x3d, 0xa7, 0x0a, 0xf3, 0xb2, 0x06,
	0xf8, 0x1e, 0x5c, 0x95, 0x07, 0x01, 0xae, 0x25, 0x8b, 0x2a, 0xc6, 0xca, 0xb0, 0x2e, 0x4a, 0x11,
	0xac, 0x15, 0xce, 0xba, 0x06, 0x4b, 0x63, 0x56, 0xb6, 0x4b, 0x0e, 0x76, 0x82, 0x77, 0xe7, 0x23,
	0xe5, 0x1c, 0xf3, 0x11, 0x39, 0x81, 0x9f, 0x35, 0xb0, 0x90, 0x9a, 0x0f, 0x58, 0x56, 0x52, 0xa4,
	0xe6, 0xce, 0xa8, 0x4c, 0xcd, 0x13, 0x7a, 0xee, 0x73, 0x3d, 0x65, 0xb8, 0x9e, 0xd6, 0x13, 0x8f,
	0x5b, 0x24, 0x6a, 0xe3, 0xee, 0xe9, 0xd0, 0xd4, 0xce, 0x86, 0xa6, 0xf6, 0x73, 0x68, 0x6a, 0x9f,
	0x46, 0x66, 0xe6, 0x6c, 0x64, 0x66, 0xbe, 0x8f, 0xcc, 0xcc, 0xeb, 0x42, 0x00, 0x3d, 0xe4, 0x05,
	0xfc, 0x23, 0x8a, 0x59, 0x33, 0xc7, 0x7f, 0x1e, 0x3c, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0xbc, 0x6e, 0xac, 0xec, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a AppRegistry by index.
	AppRegistry(ctx context.Context, in *QueryGetAppRegistryRequest, opts ...grpc.CallOption) (*QueryGetAppRegistryResponse, error)
	// Queries a list of AppRegistry items.
	AppRegistryAll(ctx context.Context, in *QueryAllAppRegistryRequest, opts ...grpc.CallOption) (*QueryAllAppRegistryResponse, error)
	// Queries a DevRegistry by index.
	DevRegistry(ctx context.Context, in *QueryGetDevRegistryRequest, opts ...grpc.CallOption) (*QueryGetDevRegistryResponse, error)
	// Queries a list of DevRegistry items.
	DevRegistryAll(ctx context.Context, in *QueryAllDevRegistryRequest, opts ...grpc.CallOption) (*QueryAllDevRegistryResponse, error)
	// Queries a list of ShowAppUsers items.
	ShowAppUsers(ctx context.Context, in *QueryShowAppUsersRequest, opts ...grpc.CallOption) (*QueryShowAppUsersResponse, error)
	// Queries a list of ShowAppParameters items.
	ShowAppParameters(ctx context.Context, in *QueryShowAppParametersRequest, opts ...grpc.CallOption) (*QueryShowAppParametersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AppRegistry(ctx context.Context, in *QueryGetAppRegistryRequest, opts ...grpc.CallOption) (*QueryGetAppRegistryResponse, error) {
	out := new(QueryGetAppRegistryResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/AppRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AppRegistryAll(ctx context.Context, in *QueryAllAppRegistryRequest, opts ...grpc.CallOption) (*QueryAllAppRegistryResponse, error) {
	out := new(QueryAllAppRegistryResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/AppRegistryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DevRegistry(ctx context.Context, in *QueryGetDevRegistryRequest, opts ...grpc.CallOption) (*QueryGetDevRegistryResponse, error) {
	out := new(QueryGetDevRegistryResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/DevRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DevRegistryAll(ctx context.Context, in *QueryAllDevRegistryRequest, opts ...grpc.CallOption) (*QueryAllDevRegistryResponse, error) {
	out := new(QueryAllDevRegistryResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/DevRegistryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowAppUsers(ctx context.Context, in *QueryShowAppUsersRequest, opts ...grpc.CallOption) (*QueryShowAppUsersResponse, error) {
	out := new(QueryShowAppUsersResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/ShowAppUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowAppParameters(ctx context.Context, in *QueryShowAppParametersRequest, opts ...grpc.CallOption) (*QueryShowAppParametersResponse, error) {
	out := new(QueryShowAppParametersResponse)
	err := c.cc.Invoke(ctx, "/poc.poc.Query/ShowAppParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a AppRegistry by index.
	AppRegistry(context.Context, *QueryGetAppRegistryRequest) (*QueryGetAppRegistryResponse, error)
	// Queries a list of AppRegistry items.
	AppRegistryAll(context.Context, *QueryAllAppRegistryRequest) (*QueryAllAppRegistryResponse, error)
	// Queries a DevRegistry by index.
	DevRegistry(context.Context, *QueryGetDevRegistryRequest) (*QueryGetDevRegistryResponse, error)
	// Queries a list of DevRegistry items.
	DevRegistryAll(context.Context, *QueryAllDevRegistryRequest) (*QueryAllDevRegistryResponse, error)
	// Queries a list of ShowAppUsers items.
	ShowAppUsers(context.Context, *QueryShowAppUsersRequest) (*QueryShowAppUsersResponse, error)
	// Queries a list of ShowAppParameters items.
	ShowAppParameters(context.Context, *QueryShowAppParametersRequest) (*QueryShowAppParametersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AppRegistry(ctx context.Context, req *QueryGetAppRegistryRequest) (*QueryGetAppRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRegistry not implemented")
}
func (*UnimplementedQueryServer) AppRegistryAll(ctx context.Context, req *QueryAllAppRegistryRequest) (*QueryAllAppRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRegistryAll not implemented")
}
func (*UnimplementedQueryServer) DevRegistry(ctx context.Context, req *QueryGetDevRegistryRequest) (*QueryGetDevRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevRegistry not implemented")
}
func (*UnimplementedQueryServer) DevRegistryAll(ctx context.Context, req *QueryAllDevRegistryRequest) (*QueryAllDevRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevRegistryAll not implemented")
}
func (*UnimplementedQueryServer) ShowAppUsers(ctx context.Context, req *QueryShowAppUsersRequest) (*QueryShowAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppUsers not implemented")
}
func (*UnimplementedQueryServer) ShowAppParameters(ctx context.Context, req *QueryShowAppParametersRequest) (*QueryShowAppParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAppParameters not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AppRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAppRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AppRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/AppRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AppRegistry(ctx, req.(*QueryGetAppRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AppRegistryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAppRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AppRegistryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/AppRegistryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AppRegistryAll(ctx, req.(*QueryAllAppRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DevRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDevRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DevRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/DevRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DevRegistry(ctx, req.(*QueryGetDevRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DevRegistryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDevRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DevRegistryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/DevRegistryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DevRegistryAll(ctx, req.(*QueryAllDevRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowAppUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowAppUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/ShowAppUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowAppUsers(ctx, req.(*QueryShowAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowAppParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowAppParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowAppParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poc.poc.Query/ShowAppParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowAppParameters(ctx, req.(*QueryShowAppParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poc.poc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AppRegistry",
			Handler:    _Query_AppRegistry_Handler,
		},
		{
			MethodName: "AppRegistryAll",
			Handler:    _Query_AppRegistryAll_Handler,
		},
		{
			MethodName: "DevRegistry",
			Handler:    _Query_DevRegistry_Handler,
		},
		{
			MethodName: "DevRegistryAll",
			Handler:    _Query_DevRegistryAll_Handler,
		},
		{
			MethodName: "ShowAppUsers",
			Handler:    _Query_ShowAppUsers_Handler,
		},
		{
			MethodName: "ShowAppParameters",
			Handler:    _Query_ShowAppParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poc/poc/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAppRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAppRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAppRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAppRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAppRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAppRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AppRegistry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAppRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAppRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAppRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAppRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAppRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAppRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppRegistry) > 0 {
		for iNdEx := len(m.AppRegistry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppRegistry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDevRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDevRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDevRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDevRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDevRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDevRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DevRegistry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDevRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDevRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDevRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDevRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDevRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDevRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevRegistry) > 0 {
		for iNdEx := len(m.DevRegistry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevRegistry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowAppUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowAppUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowAppUsersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowAppUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowAppUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowAppUsersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowAppParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowAppParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowAppParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowAppParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowAppParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowAppParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		i -= len(m.Parameters)
		copy(dAtA[i:], m.Parameters)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Parameters)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAppRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAppRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppRegistry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAppRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAppRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppRegistry) > 0 {
		for _, e := range m.AppRegistry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDevRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDevRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DevRegistry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDevRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDevRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DevRegistry) > 0 {
		for _, e := range m.DevRegistry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowAppUsersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowAppUsersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowAppParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowAppParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parameters)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAppRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAppRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAppRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAppRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAppRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAppRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppRegistry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAppRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAppRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAppRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAppRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAppRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAppRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppRegistry = append(m.AppRegistry, AppRegistry{})
			if err := m.AppRegistry[len(m.AppRegistry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDevRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDevRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDevRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDevRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDevRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDevRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevRegistry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDevRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDevRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDevRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDevRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDevRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDevRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevRegistry = append(m.DevRegistry, DevRegistry{})
			if err := m.DevRegistry[len(m.DevRegistry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowAppUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowAppUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowAppUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowAppUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowAppUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowAppUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowAppParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowAppParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowAppParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowAppParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowAppParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowAppParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
